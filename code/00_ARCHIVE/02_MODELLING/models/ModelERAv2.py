import numpy as np

from ModelHelpers import ModelHelpers
from ModelBASEv1 import ModelBASEv1


class ModelERAv2(ModelBASEv1):
    """ Version 2 of ERA-based LSTM model """

    def __init__(self, version='E2', cache_id=None):
        super().__init__(version, cache_id=cache_id)

    @staticmethod
    def train_test_split(datasets,
                         prediction_ts,
                         onset_ts,
                         years=range(1979, 2018),
                         years_train=range(1979, 2012),
                         years_dev=range(2012, 2015),
                         years_test=range(2015, 2018)):
        """
        Prepare data to be in a digestible format for the model

        :datasets: List of datasets to use as features
        :outcomes: Outcomes as generated by the base model

        :return:
        """

        # generate outcomes
        outcomes = ModelHelpers.generate_outcomes(prediction_ts, onset_ts, years, numerical=True)

        # unstack the entire dataset
        # => bring into matrix form with lat/lon on axes
        unstacked = ModelHelpers.unstack_all(datasets, years)

        print(unstacked[2017][0][0])
        print(f'> unstacked: {unstacked[2017].shape!s}')

        # generate training data
        X_train = ModelHelpers.reshape_years([unstacked[year] for year in years_train], num_channels=len(datasets))
        X_train = ModelHelpers.normalize_channels(X_train, standardize=False)
        y_train = ModelHelpers.stack_outcomes(outcomes, years_train)
        print(X_train[0][0][0])
        print(f'> X_train: {X_train.shape!s}')

        # generate test data
        X_test = ModelHelpers.reshape_years([unstacked[year] for year in years_test], num_channels=len(datasets))
        X_test = ModelHelpers.normalize_channels(X_test)
        y_test = ModelHelpers.stack_outcomes(outcomes, years_test)
        print(X_test[0][0][0])
        print(f'> X_test: {X_test.shape!s}')

        if years_dev:
            X_dev = ModelHelpers.reshape_years([unstacked[year] for year in years_dev], num_channels=len(datasets))
            X_dev = ModelHelpers.normalize_channels(X_dev)
            y_dev = ModelHelpers.stack_outcomes(outcomes, years_dev)
            print(X_dev.shape)
            print(f'> X_dev: {X_dev.shape!s}')

            return X_train, y_train, X_test, y_test, X_dev, y_dev, unstacked

        return X_train, y_train, X_test, y_test, None, None, unstacked
