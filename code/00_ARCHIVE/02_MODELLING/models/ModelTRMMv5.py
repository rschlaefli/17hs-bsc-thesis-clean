import os
import pathlib
import time
import pickle
import re
import hashlib
import numpy as np
import pandas as pd

from sklearn import preprocessing
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

from keras.models import Model, Sequential, load_model
from keras.layers import BatchNormalization, Dropout, LSTM, Dense, Conv2D, ConvLSTM2D, Flatten, MaxPooling2D, MaxPooling3D
from keras.metrics import categorical_accuracy, top_k_categorical_accuracy
from keras.preprocessing.sequence import pad_sequences
from keras.optimizers import Adam, RMSprop, SGD
from keras import backend as K
from keras.callbacks import Callback, EarlyStopping, TensorBoard, EarlyStopping, ReduceLROnPlateau, ModelCheckpoint, CSVLogger
from keras.utils import to_categorical
from keras.regularizers import l1, l2, l1_l2

from ModelHelpers import ModelHelpers
from ModelBASEv1 import ModelBASEv1


class ModelTRMMv5(ModelBASEv1):
    """ Version 5 of TRMM-based LSTM model """

    def __init__(self, version='T5', cache_id=None):
        super().__init__(version, cache_id=cache_id)

    @staticmethod
    def train_test_split(trmm_data,
                         prediction_ts,
                         onset_ts,
                         years=range(1998, 2017),
                         years_train=range(1998, 2016),
                         years_dev=None,
                         years_test=range(2016, 2017)):
        """
        Prepare data to be in a digestible format for the model

        :trmm_data: Filtered and optionally aggregated TRMM dataset to use
        :outcomes: Outcomes as generated by the base model

        :return:
        """

        # generate outcomes
        outcomes = ModelHelpers.generate_outcomes(prediction_ts, onset_ts, years, numerical=True)

        # unstack the entire trmm dataset
        # => bring into matrix form with lat/lon on axes
        unstacked = ModelHelpers.unstack_all(trmm_data, years)

        # generate training data
        X_train = ModelHelpers.reshape_years([unstacked[year] for year in years_train], num_channels=1)
        y_train = ModelHelpers.stack_outcomes(outcomes, years_train)

        # generate test data
        X_test = ModelHelpers.reshape_years([unstacked[year] for year in years_test], num_channels=1)
        y_test = ModelHelpers.stack_outcomes(outcomes, years_test)

        if years_dev:
            X_dev = ModelHelpers.reshape_years([unstacked[year] for year in years_dev], num_channels=1)
            y_dev = ModelHelpers.stack_outcomes(outcomes, years_dev)

            return X_train, y_train, X_test, y_test, X_dev, y_dev, unstacked

        return X_train, y_train, X_test, y_test, None, None, unstacked
