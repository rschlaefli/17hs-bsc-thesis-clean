
    # start building a sequential model
    model = Sequential()

    # add a ConvLSTM2D layer
    model.add(
      ConvLSTM2D(
        filters=16,
        kernel_size=(7, 7),
        activation='tanh',
        recurrent_activation='hard_sigmoid',
        kernel_regularizer=regularizers.l2(0.02),
        recurrent_regularizer=regularizers.l2(0.02)))

    model.add(MaxPooling3D(pool_size=(1, 2, 2)))
    model.add(BatchNormalization())
    model.add(Dropout(0.6))

    # ... repeat with 5x5/8 and 3x3/4

    # flatten to make data digestible for dense layers
    model.add(Flatten())
    model.add(BatchNormalization())

    # add a new dense layer
    model.add(Dense(1024, activation='relu', kernel_regularizer=regularizers.l2(0.02)))
    model.add(BatchNormalization())
    model.add(Dropout(0.6))

    # ... repeat with 512 and 256 nodes

    # final dense layer for numerical prediction
    model.add(Dense(1))

    # compile the model
    model.compile(
      loss='mean_squared_error',
      optimizer=RMSprop(lr=0.01),
      metrics=['mean_squared_error', 'mean_absolute_error'])

